name: Check for New Mangayomi Release

on:
  schedule:
    - cron: "0 0 * * *"  # Runs every day
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.12'

jobs:
  check-latest-release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get Latest Release Info
        id: get_release
        run: |
          API_URL="https://api.github.com/repos/kodjodevf/mangayomi/releases/latest"
          RESPONSE=$(curl -s $API_URL)

          # Extract release tag (version)
          RELEASE_TAG=$(echo "$RESPONSE" | jq -r '.tag_name')
          echo "Latest release: $RELEASE_TAG"

          # Extract the .ipa file URL dynamically
          IPA_URL=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name | test("Mangayomi-.*-ios.ipa")) | .browser_download_url')

          if [ -z "$IPA_URL" ]; then
            echo "No iOS IPA file found!"
            exit 1
          fi

          echo "IPA URL: $IPA_URL"

          # Save outputs for next steps
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_ENV
          echo "ipa_url=$IPA_URL" >> $GITHUB_ENV

      - name: Load Previous Release (if exists)
        id: load_previous
        run: |
          PREV_RELEASE=$(cat .current-release 2>/dev/null || echo "none")
          echo "Previous release: $PREV_RELEASE"
          echo "previous_release=$PREV_RELEASE" >> $GITHUB_ENV

      - name: Compare with Previous Release
        id: compare_release
        run: |
          if [ "$release_tag" == "$previous_release" ]; then
            echo "No new release detected."
            exit 0
          fi

          echo "New release detected: $release_tag"
          echo "$release_tag" > .current-release

      - name: Save Latest Release State
        run: echo "$release_tag" > .current-release

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Dependencies
        run:  | 
          python -m pip install --upgrade pip
          pip install requests

      - name: Run update_json.py
        run: python update_json.py

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add .
          if git diff --cached --quiet; then
            echo "No changes detected, skipping commit."
          else
            git commit -m "Updated to latest release: $release_tag"
            git push
          fi
